# Enable BuildKit features
# syntax=docker/dockerfile:1.4

# Multi-stage build untuk mengoptimalkan ukuran image

# Stage 1: Base image dengan dependencies minimal
FROM --platform=$BUILDPLATFORM ubuntu:20.04 AS base

# Setup build arguments untuk multi-platform support
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TARGETOS
ARG TARGETARCH

ENV DEBIAN_FRONTEND=noninteractive

# Create non-root user
RUN useradd -m appuser

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    python3-venv \
    build-essential \
    libopencv-dev \
    python3-opencv \
    libgstreamer1.0-0 \
    gstreamer1.0-plugins-base \
    mosquitto \
    supervisor \
    pkg-config \
    libcairo2-dev \
    libgirepository1.0-dev \
    gir1.2-gtk-3.0 \
    nginx \
    postgresql-12 \
    redis-server \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /var/lib/postgresql/data \
    && chown -R appuser:appuser /var/lib/postgresql/data \
    && mkdir -p /etc/mosquitto \
    && touch /etc/mosquitto/mosquitto.conf

# Create virtual environment
ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Upgrade pip and install basic packages
RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel Cython numpy

# Stage 2: Build untuk Stream Manager dengan optimasi cache
FROM --platform=$BUILDPLATFORM base AS stream-manager
WORKDIR /app/stream-manager
COPY services/stream-manager/requirements.txt .
RUN --mount=type=cache,target=/root/.cache/pip \
    pip3 install --no-cache-dir -r requirements.txt && \
    pip3 check
COPY services/stream-manager/ .
RUN chown -R appuser:appuser /app
USER appuser

# Stage 3: Build untuk Inference Engine dengan optimasi cache
FROM --platform=$BUILDPLATFORM base AS inference-engine
WORKDIR /app/inference-engine
COPY services/inference-engine/requirements.txt .
RUN --mount=type=cache,target=/root/.cache/pip \
    pip3 install --no-cache-dir -r requirements.txt && \
    pip3 check
COPY services/inference-engine/ .
RUN chown -R appuser:appuser /app
USER appuser

# Stage 4: Final image dengan optimasi
FROM --platform=$BUILDPLATFORM base

# Create virtual environment
ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Copy dari stage sebelumnya
COPY --from=stream-manager /app/stream-manager /app/stream-manager
COPY --from=inference-engine /app/inference-engine /app/inference-engine

# Setup environment variables
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,video
ENV NPU_VISIBLE_DEVICES=all
ENV PYTHONUNBUFFERED=1

# Setup supervisor configuration and log directories
USER root
RUN mkdir -p /var/log/supervisor /etc/supervisor/conf.d \
    && chown -R root:root /var/log/supervisor \
    && chmod -R 750 /var/log/supervisor \
    && mkdir -p /app/inference-engine/models \
    && chmod -R 750 /app \
    && chown -R appuser:appuser /app

# Copy supervisor configuration
RUN mkdir -p /var/log/supervisor && chown -R appuser:appuser /var/log/supervisor

COPY supervisord.conf /etc/supervisor/conf.d/
RUN chmod 644 /etc/supervisor/conf.d/supervisord.conf

USER appuser

# Expose ports yang diperlukan saja
EXPOSE 1883 9001 8000

# Start services menggunakan supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]