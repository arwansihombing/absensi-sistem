# Multi-stage build untuk sistem absensi terintegrasi

# Stage 1: Base image dengan dependencies umum
FROM nvidia/cuda:11.4.0-runtime-ubuntu20.04 as base

ENV DEBIAN_FRONTEND=noninteractive

# Install dependencies sistem
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    libgstreamer1.0-0 \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    python3-gst-1.0 \
    libopencv-dev \
    python3-opencv \
    redis-server \
    mosquitto \
    postgresql \
    postgresql-contrib \
    supervisor \
    git \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Install TensorRT
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin \
    && mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600 \
    && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub \
    && add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /" \
    && apt-get update && apt-get install -y tensorrt \
    && rm -rf /var/lib/apt/lists/*

# Stage 2: Build untuk Stream Manager
FROM base as stream-manager
WORKDIR /app/stream-manager
COPY services/stream-manager/requirements.txt .
RUN pip3 install --no-cache-dir numpy>=1.21.0 \
    opencv-python>=4.5.3.56 \
    paho-mqtt>=1.5.1 \
    pyzmq>=22.3.0 \
    gstreamer-python>=0.3.0 \
    av>=8.0.3 \
    tensorflow-lite>=2.5.0 \
    onnxruntime>=1.8.1 \
    prometheus-client>=0.11.0 \
    structlog>=21.1.0 \
    pyyaml>=5.4.1 \
    cryptography>=3.4.7 \
    retrying>=1.3.3 \
    tenacity>=8.0.1
COPY services/stream-manager/ .

# Stage 3: Build untuk Inference Engine
FROM base as inference-engine
WORKDIR /app/inference-engine
COPY services/inference-engine/requirements.txt .
RUN pip3 install --no-cache-dir torch>=1.9.0 \
    torchvision>=0.10.0 \
    onnxruntime-gpu>=1.8.1 \
    tensorflow-lite>=2.5.0 \
    opencv-python>=4.5.3.56 \
    dlib>=19.22.0 \
    facenet-pytorch>=2.5.2 \
    insightface>=0.6.2 \
    ultralytics>=8.0.0 \
    retinaface>=0.0.5 \
    arcface-torch>=1.8.0 \
    scikit-image>=0.18.3 \
    scikit-learn>=0.24.2 \
    mediapipe>=0.8.9.1 \
    tensorrt>=8.2.0 \
    paho-mqtt>=1.5.1 \
    redis>=4.0.2 \
    prometheus-client>=0.11.0 \
    structlog>=21.1.0 \
    numpy>=1.21.0 \
    pyyaml>=5.4.1 \
    cryptography>=3.4.7
COPY services/inference-engine/ .

# Stage 4: Build untuk API Gateway
FROM base as api-gateway
WORKDIR /app/api-gateway
COPY services/api-gateway/requirements.txt .
RUN pip3 install -r requirements.txt
COPY services/api-gateway/ .

# Stage 5: Build untuk Admin Panel
FROM node:16 as admin-panel
WORKDIR /app/admin-panel
COPY services/admin-panel/package*.json ./
RUN npm install
COPY services/admin-panel/ .
RUN npm run build

# Stage 6: Final image
FROM base

# Copy dari stage sebelumnya
COPY --from=stream-manager /app/stream-manager /app/stream-manager
COPY --from=inference-engine /app/inference-engine /app/inference-engine
COPY --from=api-gateway /app/api-gateway /app/api-gateway
COPY --from=admin-panel /app/admin-panel/dist /app/admin-panel

# Setup direktori dan permissions
RUN mkdir -p /mosquitto/data /mosquitto/log \
    && chown -R mosquitto:mosquitto /mosquitto \
    && mkdir -p /var/lib/postgresql/data \
    && chown -R postgres:postgres /var/lib/postgresql/data

# Copy konfigurasi
COPY services/timescaledb/timescale.conf /etc/postgresql/postgresql.conf
COPY mosquitto.conf /etc/mosquitto/mosquitto.conf

# Setup supervisor
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Expose ports
EXPOSE 1883 9001 5432 6379 8000 3000

# Start services menggunakan supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]